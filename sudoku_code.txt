def is_valid(board, row, col, num):
    """Check if num can be placed at board[row][col]"""
    
    # Check if num is in the row
    if num in board[row]:
        return False

    # Check if num is in the column
    for i in range(9):
        if board[i][col] == num:
            return False

    # Check if num is in the 3Ã—3 grid
    start_row, start_col = (row // 3) * 3, (col // 3) * 3
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j] == num:
                return False

    return True

def solve_sudoku(board):
    """Solve the Sudoku board using Backtracking"""
    for row in range(9):
        for col in range(9):
            if board[row][col] == 0:  # Find an empty cell
                for num in range(1, 10):  # Try numbers 1-9
                    if is_valid(board, row, col, num):
                        board[row][col] = num  # Place number
                        if solve_sudoku(board):  # Recursively solve next cell
                            return True
                        board[row][col] = 0  # Undo move if incorrect
                return False  # No valid number found, backtrack
    return True  # Solved!

def print_board(board):
    """Prints the Sudoku board with grids"""
    for i in range(9):
        if i % 3 == 0 and i != 0:
            print("- - - + - - - + - - -")  # Print horizontal grid lines

        for j in range(9):
            if j % 3 == 0 and j != 0:
                print("|", end=" ")  # Print vertical grid lines
            
            print(board[i][j] if board[i][j] != 0 else ".", end=" ")
        
        print()  # Move to next row

def get_input():
    """Get Sudoku puzzle input from the user"""
    print("Enter the Sudoku puzzle (use '0' for empty cells and space/comma for separation):")
    board = []
    
    for i in range(9):
        while True:
            try:
                row = input(f"Row {i+1}: ")
                # Split input by space or comma and convert each entry to an integer
                board.append([int(x) if x != '.' else 0 for x in row.replace(",", " ").split()])
                if len(board[-1]) == 9:  # Ensure each row has 9 numbers
                    break
                else:
                    print("Each row must have exactly 9 numbers.")
            except ValueError:
                print("Invalid input, please enter integers only.")
    
    return board

# Get Sudoku puzzle input from the user
sudoku_board = get_input()

print("\nSudoku Puzzle:")
print_board(sudoku_board)

if solve_sudoku(sudoku_board):
    print("\nSolved Sudoku:")
    print_board(sudoku_board)
else:
    print("No solution exists")


